/*
 * SimulateDataTool.java
 *
 * Created on __DATE__, __TIME__
 */

package com.handpay.mina.server;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.Random;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * 
 * @author yongwang
 */
public class SimulateDataTool extends javax.swing.JFrame {
	private ConsoleTextArea logger = ConsoleTextArea.getInstance(this
			.getClass());
	private MinaServer minaServer;
	private ApplicationContext appctx;
	private boolean isShow;

	/** Creates new form SimulateDataTool */
	public SimulateDataTool() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jTextField1 = new javax.swing.JTextField();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jTextField2 = new javax.swing.JTextField();
		jTextField3 = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = ConsoleTextArea.getInstance(this.getClass());
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		jMenuItem4 = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		jMenuItem2 = new javax.swing.JMenuItem();
		jMenuItem3 = new javax.swing.JMenuItem();

		setTitle("Front End Simulate Data Tool V1.0  Author eric_wang(email:wangyong31893189@163.com) ");
		// setAlwaysOnTop(true);
		setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		// setDefaultCloseOperation(3);
		setResizable(false);

		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				int a = JOptionPane.showConfirmDialog(null, "Sure Close?", "Kindly reminder",
						JOptionPane.YES_NO_OPTION);
				if (a == 0) {
					// dispose();
					serverStop();
					System.exit(0);// ¹Ø±Õ
				}
			}
		});
		jLabel1.setText("Config Folder Path:");

		jTextField1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				// jTextField1ActionPerformed(evt);
			}
		});
		String defaultPath = Class.class.getClass().getResource("/").getPath();
		try {
			defaultPath=URLDecoder.decode(defaultPath,"utf-8");
		} catch (UnsupportedEncodingException e) {
			logger.error("decode folder path show error!",e);
		}
		jTextField1.setText(defaultPath.substring(1));
		logger.info("Default config file path is £º" + defaultPath.substring(1));

		jButton1
				.setText("Start Service");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2
				.setText("Stop Service");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jButton3.setText("Select Folder");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		jLabel2.setText("Server IP Address(Local Machine IP Or 127.0.0.1):");

		jLabel3.setText("Sever Port:");

		jTextField2.setText("127.0.0.1");

		jTextField3.setText("8888");

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		jMenu1.setText("File");

		jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(
				java.awt.event.KeyEvent.VK_S,
				java.awt.event.InputEvent.CTRL_MASK));
		jMenuItem1.setText("save log");
		jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem1ActionPerformed(evt);
			}
		});
		jMenuItem4.setText("change style");
		jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem4ActionPerformed(evt);
			}
		});

		jMenu1.add(jMenuItem1);
		jMenu1.add(jMenuItem4);

		jMenuBar1.add(jMenu1);

		jMenu2.setText("help");

		jMenuItem2.setText("about");
		jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem2ActionPerformed(evt);
			}
		});

		jMenu2.add(jMenuItem2);

		jMenuItem3.setText("readme");
		jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem3ActionPerformed(evt);
			}
		});

		jMenu2.add(jMenuItem3);

		jMenuBar1.add(jMenu2);

		setJMenuBar(jMenuBar1);
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				104,
																				104,
																				104)
																		.addComponent(
																				jLabel2)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jTextField2,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				124,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(
																				81,
																				81,
																				81)
																		.addComponent(
																				jLabel3)
																		.addGap(
																				18,
																				18,
																				18)
																		.addComponent(
																				jTextField3,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				80,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				31,
																				31,
																				31)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addComponent(
																												jLabel1)
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																										.addComponent(
																												jTextField1,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												491,
																												javax.swing.GroupLayout.PREFERRED_SIZE))
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addComponent(
																												jButton1)
																										.addGap(
																												209,
																												209,
																												209)
																										.addComponent(
																												jButton2)))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(
																				jButton3)))
										.addContainerGap(108, Short.MAX_VALUE))
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup().addContainerGap(
										46, Short.MAX_VALUE).addComponent(
										jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										755,
										javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(30, 30, 30)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGap(35, 35, 35)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel1)
														.addComponent(
																jTextField1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jButton3))
										.addGap(51, 51, 51)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel3)
														.addComponent(
																jTextField3,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jLabel2)
														.addComponent(
																jTextField2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(65, 65, 65)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jButton1)
														.addComponent(jButton2))
										.addGap(32, 32, 32)
										.addComponent(
												jScrollPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												332, Short.MAX_VALUE)
										.addContainerGap()));

		setLocation(400, 200);
		pack();
	}// </editor-fold>

	// GEN-END:initComponents

	private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {
		File file = new File("simulateDataConfigDemo.txt");
		try {
			String demo = FileUtils.readFileToString(file);
			JOptionPane.showMessageDialog(null, demo, "Config file edit demo",
					JOptionPane.INFORMATION_MESSAGE);
		} catch (IOException e) {
			logger.error("Config example file read error!", e);
		}
	}

	private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			int i = new Random().nextInt(3);
			if (i == 0) {
				UIManager.setLookAndFeel(UIManager
						.getSystemLookAndFeelClassName());
			} else if (i == 1) {
				UIManager
						.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
			} else if (i == 2) {
				UIManager.setLookAndFeel(UIManager
						.getCrossPlatformLookAndFeelClassName());
			} else {
				UIManager.setLookAndFeel(UIManager
						.getSystemLookAndFeelClassName());
			}
			SwingUtilities.updateComponentTreeUI(this);
		} catch (Exception e) {
			logger.error("Frame style update error!", e);
		}
	}

	private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {
		JOptionPane.showMessageDialog(null, "Front End Simulate Data Tool V1.0", "Version",
				JOptionPane.INFORMATION_MESSAGE);
	}

	private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser fileChooser = new JFileChooser();
		int option = fileChooser.showSaveDialog(null);
		if (option == JFileChooser.APPROVE_OPTION) {
			File file = fileChooser.getSelectedFile();
			try {
				if (file.exists() == false) {
					file.createNewFile();
				}
				FileUtils.writeStringToFile(file, jTextArea1.getText());
				JOptionPane.showMessageDialog(null, "log file save success!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
				logger.info("log file save success!");
			} catch (IOException e) {
				logger.error("log file save fail!", e);
			}
		}
	}

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = fileChooser.showOpenDialog(fileChooser);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			String filePath = fileChooser.getSelectedFile().getAbsolutePath();// Õâ¸ö¾ÍÊÇÄãÑ¡ÔñµÄÎÄ¼þ¼ÐµÄÂ·¾¶
			logger.info("Selected folder path is:" + filePath);
			jTextField1.setText(filePath);
		}
	}

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		serverStop();
	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		serverStart();
	}

	private void serverStop() {
		logger.info("Stop simulate data service!");
		if (minaServer == null) {
			return;
		}
		try {
			minaServer.destroy();
			if (this.isShow) {
				JOptionPane.showMessageDialog(null, "Simulate data service stop success!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.info("Simulate data service stop success!");
		} catch (Exception e) {
			if (this.isShow) {
				JOptionPane.showMessageDialog(null, "Simulate data service stop fail!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.error("Simulate data service stop fail!");
		}
	}

	private void serverStart() {
		logger.info("Start simulate data service!");
		if (!initValidate()) {
			return;
		}
		try {
			if (appctx == null) {
				appctx = new ClassPathXmlApplicationContext(
						"/spring/spring-application.xml");
			}
			if (minaServer != null) {
				minaServer.destroy();
				logger.warn("Simulate data server before start must stop service!");
			}
			ReadDataConfig.getInstance()
					.initServerConfig(jTextField1.getText());
			minaServer = (MinaServer) appctx.getBean("ccbServer");
			minaServer.setIp(jTextField2.getText());
			minaServer.setPort(Integer.valueOf(jTextField3.getText()));
			minaServer.init();
			if (this.isShow) {
				JOptionPane.showMessageDialog(null, "Simulate data service start success!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.info("Simulate data service start success!");
		} catch (SimulateDataException e) {
			if (this.isShow) {
				JOptionPane.showMessageDialog(null, e.getErrorMsg(), "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.error("Simulate data service stop fail!", e);
		} catch (Exception e) {
			if (this.isShow) {
				JOptionPane.showMessageDialog(null, "Simulate data service start fail!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.error("Simulate data service start fail!", e);
		}

	}

	private boolean initValidate() {
		String folder = jTextField1.getText();
		if (StringUtils.isBlank(folder)) {
			if (this.isShow) {
				JOptionPane.showMessageDialog(null, "Config folder path can't empty!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.error("Config folder path can't empty!");
			return false;
		}
		String ip = jTextField2.getText();

		if (StringUtils.isBlank(ip)) {
			if (this.isShow) {
				JOptionPane.showMessageDialog(null, "Server IP address can't empty!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.error("Server IP address can't empty!");
			return false;
		}
		if (!ip
				.matches(MainApplication.IPREX)) {
			if (this.isShow) {
				JOptionPane.showMessageDialog(null,
						"Server IP address is not keeping with rules(for example:XXX.XXX.XXX.XXX)!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.error("Server IP address is not keeping with rules(for example:XXX.XXX.XXX.XXX)!");
			return false;
		}
		String port = jTextField3.getText();
		if (StringUtils.isBlank(ip)) {
			if (this.isShow) {
				JOptionPane.showMessageDialog(null, "Server port can't empty!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.error("Server port can't empty!");
			return false;
		}
		if (!StringUtils.isNumeric(port)) {
			if (this.isShow) {
				JOptionPane.showMessageDialog(null, "Server port must be a number!", "Informational message",
						JOptionPane.INFORMATION_MESSAGE);
			}
			logger.error("Server port must be a number!");
			return false;
		}
		return true;
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
//	public static void main(String args[]) {
//		// java.awt.EventQueue.invokeLater(new Runnable() {
//		// public void run() {
//		if (args != null && args.length > 0) {
//			SimulateDataTool dataTool = new SimulateDataTool();
//			dataTool.setVisible(false);
//			dataTool.isShow = false;
//			// dataTool.jTextField1.setText(args[0]);
//			if (StringUtils.isNotBlank(args[0])
//					&& args[0]
//							.matches(IPREX)) {
//				dataTool.jTextField2.setText(args[0]);
//			} else {
//				dataTool.jTextArea1.error("IPµØÖ·²»·ûºÏ¹æÔò!ip:" + args[0]);
//				System.exit(0);
//				return;
//			}
//			if (StringUtils.isNumeric(args[1])) {
//				dataTool.jTextField3.setText(args[1]);
//			} else {
//				dataTool.jTextArea1.error("¶Ë¿ÚºÅ²»·ûºÏ¹æÔò!port:" + args[1]);
//				System.exit(0);
//				return;
//			}
//			dataTool.serverStart();
//		} else {
//			SimulateDataTool dataTool = new SimulateDataTool();
//			dataTool.setVisible(true);
//			dataTool.isShow = true;
//		}
//		// }
//		// });
//	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	public boolean isShow() {
		return isShow;
	}

	public void setShow(boolean isShow) {
		this.isShow = isShow;
	}

	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JMenuItem jMenuItem2;
	private javax.swing.JMenuItem jMenuItem3;
	private javax.swing.JMenuItem jMenuItem4;
	private javax.swing.JScrollPane jScrollPane1;
	private ConsoleTextArea jTextArea1;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JTextField jTextField2;
	private javax.swing.JTextField jTextField3;
}